install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("car")
install.packages("lme4/nlme")
install.packages("lme4")
install.packages("nlme")
install.packages("survival")
install.packages("caret")
install.packages("zoo")
install.packages("xts")
install.packages("quantmod")
install.packages("foreign")
install.packages("haven")
m <-a(2,3,4,5,6,7,8,9,10)
m <-a(2,3,4,5,6,7,8,9,10)
demo()
x <- a(2,3,4,5,6,7,8,2,3,3,3,2,4,7,7,8,8,8,8,8)
x <- a(2,3,4,5,6,7,8,2,3,3,3,2,4,7,7,8,8,8,8,8)
clearPushBack()
help("par")
help("library MASS")
??library MASS
'??Library MASS'
'??Library MASS'
library(MASS, lib.loc = "C:/Program Files/R/R-3.6.1/library")
summary(Animals)
table(Animals)
data.frame(Animals)
Sheep
attach(Animals)
Sheep
names(Animals)
attach(Sheep)
attach(body)
par(mfrow = c(2,2))
plot(body,brain)
par(mfrow = c(2,2),cex=1.25,mex=1.25)
plot(brain,body)
par(mfrow = c(2,2),cex=0.5,mex=0.25)
plot(brain,body)
par(mfrow = c(2,2))
plot(brain,body)
plot(brain * 0.25,body *0.25)
PLOT <- function(xvar = "body",yvar = "brain"){x<-[,xvar] y<-[,yvar] plot(x,y,xlab = xvar,ylab = yvar)}
PLOT <- function(xvar = "Pig",yvar = "Sheep"){x<-Animals[,xvar] y<-Animals[,yvar] plot(x,y,xlab = xvar,ylab = yvar)}
PLOT <- function Animals(xvar = "Pig",yvar = "Sheep"){x<-Animals[,xvar] y<-Animals[,yvar] plot(x,y,xlab = xvar,ylab = yvar)}
PLOTANIMALS <- function Animals(xvar = "Pig",yvar = "Sheep"){x<-Animals[,xvar] y<-Animals[,yvar] plot(x,y,xlab = xvar,ylab = yvar)}
aNIMALS <- function Animals(xvar = "Pig",yvar = "Sheep"){x<-Animals[,xvar] y<-Animals[,yvar] plot(x,y,xlab = xvar,ylab = yvar)}
plot.Animals <- function Animals(xvar = "Pig",yvar = "Sheep"){x<-Animals[,xvar] y<-Animals[,yvar] plot(x,y,xlab = xvar,ylab = yvar)}
plot.Animals <- function(xvar = "Pig",yvar = "Sheep"){x<-Animals[,xvar] y<-Animals[,yvar] plot(x,y,xlab = xvar,ylab = yvar)}
par(mfrow = c(2,2))
plot(brain * 0.25,body *0.25)
plot(brain * 0.5,body *0.5)
plot(brain * 1,body *1)
plot(brain * 2,body *2)
par(mfrow = c(2,2), fg="red")
plot(brain * 3,body *3)
par(mfrow = c(2,2), fg="red",cex=0.4)
plot(brain * 4,body *4)
par(mfrow = c(2,2), fg="red",cex=0.5)
plot(brain * 4,body *4)
par(mfrow = c(2,2), fg="red",cex=1)
plot(brain * 4,body *4)
par(mfrow = c(2,2), fg="red",cex=1, mex=1)
plot(brain * 4,body *4)
par(mfrow = c(2,2), fg="red",cex=1.5, mex=1)
plot(brain * 4,body *4)
par(mfrow = c(2,2), fg="red",cex=0.5, mex=0.5)
plot(brain * 4,body *4)
par(mfrow = c(2,2), pch=16)
plot(brain * 4,body *4)
par(mfrow = c(2,2), fg="red",cex=0.5, mex=0.5, pch=16)
plot(brain * 4,body *4)
detach(Animals)
par(mfrow = c(2,2), fg="red",cex=0.5, mex=0.5, pch=16)
plot(brain * 4,body *4)
plot(x=Bodywt, y=Brainwt, pch=16,
xlab="Body weight (kg)", ylab="Brain weight (g)",
xlim=c(0,280), ylim=c(0,1350))
# Specify xlim so that there is room for the labels
text(x=Bodywt, y=Brainwt, labels=row.names(primates), pos=4)
detach(primates)
attach(Animals)
plot(x=body, y=braint, pch=16,
xlab="Body weight (kg)", ylab="Brain weight (g)",
xlim=c(0,280), ylim=c(0,1350))
# Specify xlim so that there is room for the labels
text(x=Bodywt, y=Brainwt, labels=row.names(primates), pos=4)
detach(primates)
plot(x=body, y=braint, pch=16,
xlab="Body weight (kg)", ylab="Brain weight (g)",
xlim=c(0,280), ylim=c(0,1350))
# Specify xlim so that there is room for the labels
text(x=Bodywt, y=Brainwt, , pos=4)
detach(primates)
plot(x=body, y=braint, pch=16,
xlab="Body weight (kg)", ylab="Brain weight (g)",
xlim=c(0,280), ylim=c(0,1350))
# Specify xlim so that there is room for the labels
text(x=body, y=brain , pos=4)
detach(primates)
plot(x=body, y=brain, pch=16,
xlab="Body weight (kg)", ylab="Brain weight (g)",
xlim=c(0,280), ylim=c(0,1350))
# Specify xlim so that there is room for the labels
text(x=body, y=brain , pos=4)
detach(primates)
plot(x=body, y=brain, pch=16,
xlab="Body weight (kg)", ylab="Brain weight (g)",
xlim=c(0,280), ylim=c(0,1350))
# Specify xlim so that there is room for the labels
text(x=body, y=brain , pos=4)
detach(Animals)
help("pch")
help("xlim")
help("hist")
attach(Animals)
here <- Pigs == "g"
hist(totlngth[here], breaks = 72.5 + (0:5) * 5, ylim = c(0, 22),
xlab="Total length", main ="A: Breaks at 72.5, 77.5, ...")
detach(Animals)
attach(Animals)
here <- Pigs == "g"
hist( breaks = 72.5 + (0:5) * 5, ylim = c(0, 22),
xlab="Total length", main ="A: Breaks at 72.5, 77.5, ...")
detach(Animals)
attach(Animals)
plot(density(totlngth[here]),type="l")
detach(Animals)
attach(Animals)
plot(density(type="l")
detach(Animals)
attach(Animals)
plot(density())
detach(Animals)
setwd("C:/Users/Big-Max/Downloads/hotel-booking-demand")
hotel <- read.csv("C:/Users/Big-Max/Downloads/hotel-booking-demand/hotel_bookings.csv")
library(rsample)
split<- initial_split(hotel, prop = .7)
train <- training(split)
test <- testing(split)
library(rpart)
model <- rpart(is_canceled~ ., data = train)
pred <- predict(model, test, type="class")
pred <- predict(model, test, type="class")
pred <- predict(model, test, type="response")
pred <- predict(model, test, type="prob")
pred <- predict(model, test, type="class")
pred <- predict(model, test, type="vector")
pred
table(pred)
predicted_bookings <- table(test$is_canceled, pred)
predicted_bookings
table(cbind(test$is_canceled), pred)
(cbind(test$is_canceled), pred)
predicted_bookings <-merge (data(hotel$hotel), data(pred), by = c("Hotel","Predicted"))
predicted_bookings <-merge (data(pred) by = c("Hotel","Predicted"))
predicted_bookings <-merge (data(pred) by= c("Hotel","Predicted"))
data.frame(pred)
data.frame(c=(predicted = pred), hotel)
data.frame(c=(pred), hotel)
data.frame(c=(pred), hotel$hotel)
data.frame(c=(pred), hotel$hotel)
data.frame(c=(pred), test$hotel)
data.frame(predicted, test$hotel)
pred
data.frame(predicted, test$hotel)
data.frame(a, test$hotel)
data.frame(predicted, test$hotel)
glimpse(hotel)
levels(hotel,)
levels(hotel)
sapply(hotel, classLabel)
sapply(hotel, className)
sapply(hotel, class)
data.frame(test$hotel, predicted)
table(hotel$hotel)
table(hotel$hotel)
table(hotel$hotel)
table(hotel$hotel)
predicted_bookings <- cbind(table(test$hotel), predicted)
View(predicted_bookings)
predicted_bookings <- cbind(table(test$hotel), predicted)
table(pred)
table(test$is_canceled,pred)
table(test$hotel)
table(test$is_canceled, pred)
ggplot(hotel$is_canceled)
ggplot(hotel, aes(is_canceled, fill = is_canceled)) +
stat_density_common(bandwidth = 1, geom = "area", position = "stack")
library(ggplot2)
ggplot(hotel, aes(is_canceled, fill = is_canceled)) +
stat_density_common(bandwidth = 1, geom = "area", position = "stack")
library(ggplot2)
ggplot(data = train, aes(x = hotel, y= is_canceled, fill= is_canceled)) +
geom_bar(colour= "black", stat="identity")+
guides(fill=FALSE)
library(ggplot2)
ggplot(data = train, aes(x = hotel, y= is_canceled, fill= is_canceled)) +
geom_bar(colour= "black", stat="identity")+
guides(fill=FALSE)
library(ggplot2)
ggplot(data = train, aes(x = is_canceled))+
geom_bar(stat = "count")
library(ggplot2)
ggplot(data = train, aes(x = is_canceled))+
geom_bar(stat = "count")
library(ggplot2)
ggplot(data = train, aes(x = is_canceled))+
geom_bar(stat = "count")
library(ggplot2)
ggplot(data = train, aes(x = is_canceled))+
geom_bar(stat = "count")
library(ggplot2)
ggplot(data = train, aes(x = is_canceled))+
geom_bar(stat = "count")
library(ggplot2)
ggplot(data = train, aes(x = hotel, y= is_canceled, fill= is_canceled)) +
geom_bar(colour= "black", stat="identity")+
guides(fill=FALSE)
library(ggplot2)
ggplot(data = train, aes(x = hotel, y= "count", fill= is_canceled)) +
geom_bar(colour= "black", stat="identity")+
guides(fill=FALSE)
library(ggplot2)
ggplot(data = train, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar(colour= "black", stat="identity")+
guides(fill=FALSE)
library(ggplot2)
ggplot(data = test, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar(colour= "black", stat="identity")+
guides(fill=FALSE)
levels(hotel$hotel)
levels(hotel$hotel)
summary(hotel$hotel)
levels(train$hotel)
summary(train$hotel)
summary(hotel$hotel)
library(ggplot2)
ggplot(data = test, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar(colour= "black", stat="identity")+
guides(fill=FALSE)
library(ggplot2)
ggplot(data = test, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar(colour= "orange", stat="identity")+
guides(fill=FALSE)
library(ggplot2)
ggplot(data = test, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar(colour= "orange", stat="identity")
library(ggplot2)
ggplot(data = test, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar( stat="identity")
library(ggplot2)
ggplot(data = test, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar( stat="identity")+
guides(fill = FALSE)
library(ggplot2)
ggplot(data = train, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar( stat="identity")+
guides(fill = FALSE)
library(ggplot2)
ggplot(data = hotel, aes(x = hotel, y= "count", fill= is_canceled)) +
geom_bar( stat="identity")+
guides(fill = FALSE)
library(ggplot2)
ggplot(data = hotel, aes(x = hotel, y= "count")) +
geom_bar( stat="identity")+
guides(fill = FALSE)
tabel(hotel$country, hotel$market_segment)
levels(hotel$country)
ggplot(data = hotel, aes(x = country, y= "count")) +
geom_line( )+
geom_map()
ggplot(data = hotel, aes(x = country, y= "count")) +
geom_line( )+
GeomPoint()
ggplot(data = hotel, aes(x = country, y= "count")) +
geom_line( )+
geom_point()
ggplot(data = hotel, aes(x = market_segment, y= "count")) +
geom_line( )+
geom_point()
table(test$is_canceled, pred)
library(ggplot2)
ggplot(data = train, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar( stat="identity")+
guides(fill = FALSE)
pred <- predict(model, test, type="vector")
data.frame(test$hotel, predicted)
ggplot(data = hotel, aes(x = market_segment,)) +
geom_line( )+
geom_point()
ggplot(data = hotel, aes(x = market_segment, y= "count")) +
geom_line( )+
geom_point()
library(rpart)
model <- rpart(is_canceled~ ., data = train)
library(ggplot2)
ggplot(data = train, aes(x = is_canceled, y= "count", fill= is_canceled)) +
geom_bar( stat="identity")+
guides(fill = FALSE)
table(test$is_canceled, pred)
data.frame(test$hotel, predicted)
ggplot(data = hotel, aes(x = arrival_date_month, y= "count")) +
geom_line( )+
geom_point()
ggplot(data = hotel, aes(x = arrival_date_month, y= "count", fill = country)) +
geom_line( )+
geom_point()
ggplot(data = hotel, aes(x = arrival_date_month, y= "count", fill = stays_in_week_nights)) +
geom_line( )+
geom_point()
ggplot(data = hotel, aes(x = arrival_date_month, y= "count", fill = stays_in_week_nights)) +
geom_bar( stat="identity")+
guides(fill = FALSE)
ggplot(data = hotel, aes(x = arrival_date_month, y= "count", fill = stays_in_week_nights)) +
geom_bar(colours= "orange", stat="identity")+
guides(fill = FALSE)
ggplot(data = hotel, aes(x = arrival_date_month, y= stays_in_week_nights)) +
geom_bar(colours= "orange", stat="identity")+
guides(fill = FALSE)
levels(stays_in_week_nights)
levels(hotel$stays_in_week_nights)
summary(hotel$stays_in_week_nights)
sapply(hotel$stays_in_week_nights, class)
as.factor(hotel$stays_in_week_nights)
ggplot(data = hotel, aes(x = arrival_date_month, y= count)) +
geom_bar(colours= "orange", stat="identity")+
guides(fill = FALSE)
ggplot(data = hotel, aes(x = arrival_date_month, y= "count")) +
geom_bar(colours= "orange", stat="identity")+
guides(fill = FALSE)
ggplot(data = hotel, aes(x = arrival_date_month, y= "count")) +
geom_bar( stat="identity")+
guides(fill = FALSE)
ggplot(data = hotel, aes(x = arrival_date_month, y= "count", fill = is_canceled)) +
geom_bar( stat="identity")+
guides(fill = FALSE)
ggplot(data = hotel, aes(x = arrival_date_month, y= "count", fill = is_canceled)) +
geom_bar( stat="identity")
ggplot(data = hotel, aes(x = arrival_date_month, y= "count")) +
geom_bar( stat="identity")
guides(fill= FALSE)
ggplot(data = hotel, aes(x = arrival_date_month, y= "count")) +
geom_bar( stat="identity")
library(rsample)
split<- initial_split(hotel, prop = .7)
train <- training(split)
test <- testing(split)
library(rpart)
model <- rpart(is_canceled~ ., data = train)
pred <- predict(model, test, type="class")
pred <- predict(model, test, type="vector")
summary(hotel)
sapply(hotel, class)
summary(hotel)
sapply(hotel, class)
hotel<- transform(
hotel,
hotel = as.factor(hotel),
is_canceled = as.factor(is_canceled),
stays_in_weekend_nights = as.factor(stays_in_weekend_nights),
adults = as.factor(adults),
children = as.factor(children),
babies = as.factor(babies ),
is_repeated_guest =as.factor(is_repeated_guest),
previous_cancellations = as.factor(previous_cancellations),
previous_bookings_not_canceled = as.factor(previous_bookings_not_canceled),
booking_changes = as.factor(booking_changes),
days_in_waiting_list = as.factor(days_in_waiting_list),
required_car_parking_spaces = as.factor( required_car_parking_spaces),
total_of_special_requests = as.factor(total_of_special_requests)
)
summary(hotel)
hotel<- transform(
hotel,
hotel = as.factor(hotel),
is_canceled = as.factor(is_canceled),
stays_in_weekend_nights = as.factor(stays_in_weekend_nights),
adults = as.factor(adults),
children = as.factor(children),
babies = as.factor(babies ),
is_repeated_guest =as.factor(is_repeated_guest),
previous_cancellations = as.factor(previous_cancellations),
previous_bookings_not_canceled = as.factor(previous_bookings_not_canceled),
booking_changes = as.factor(booking_changes),
days_in_waiting_list = as.factor(days_in_waiting_list),
required_car_parking_spaces = as.factor( required_car_parking_spaces),
total_of_special_requests = as.factor(total_of_special_requests)
)
library(ggplot2)
ggplot(data = hotel, aes(x = hotel, y= "count")) +
geom_bar( stat="identity")+
guides(fill = FALSE)
library(rsample)
split<- initial_split(hotel$is_canceled, prop = .7)
library(caTools)
split<- sample.split(hotel$is_canceled, SplitRatio  = 0.7)
library(caTools)
split<- sample.split(hotel$is_canceled, SplitRatio  = 0.7)
test <- subset(hotel, split= "FALSE")
train<- subset(hotel, split= "TRUE")
library(caTools)
split<- sample.split(hotel$is_canceled, SplitRatio  = 0.7)
test <- subset(hotel, split= "FALSE")
train<- subset(hotel, split= "TRUE")
library(rpart)
model <- rpart(is_canceled~ ., data = train)
pred <- predict(model, test, type="vector")
data.frame(test$hotel, predicted)
pred
table(test$is_canceled, pred)
pred <- data.frame(pred)
pred <- data.frame(pred)
pred <- data.frame(pred)
pred <- data.frame(pred)
pred <- data.frame(pred)
pred <- data.frame(pred)
pred
library(rsample)
split<- initial_split(hotel, prop= 0.7)
test <- testing(split)
train<- training(split)
library(caTools)
split<- sample.split(hotel$is_canceled, SplitRatio  = 0.7)
test <- subset(hotel, split= "FALSE")
train<- subset(hotel, split= "TRUE")
levels(test)
dim(test)
levels(split)
sapply(split, class)
sapply(test, class)
library(rsample)
split<- initial_split(hotel,prop = 0.7)
test <- testing(split)
train<- training(split)
library(rpart)
model <- rpart(is_canceled~ ., data = train)
pred <- predict(model, test, type="vector")
pred <- data.frame(pred)
pred
table(test$is_canceled, pred)
